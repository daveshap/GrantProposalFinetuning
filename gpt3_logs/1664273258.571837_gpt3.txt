Summarize the following paper for literature review.


PAPER:
nodes formulas look like in terms of factored AND and OR gates. Running SAT-solvers on such logic functions to nd satisfying assignments can serve the process of system verication. Also from this small example it can already be seen that missing dependencies on features can be found which can help on curating data sets. Logic Report: l0n0_nn Inputs: Input 0: systolic Input 1: haemoglobin Input 2: urea Input 3: creatinine Outputs: Output: l0n0_nn_out Equations: n21 = systolic[0] AND systolic[1]; n22 = NOT systolic[0] AND NOT systolic[1]; n23 = NOT n21 AND NOT n22; n24 = haemoglobin[0] AND n23; n25 = systolic[2] AND n23; n26 = NOT systolic[2] AND NOT n23; n27 = NOT n25 AND NOT n26; n28 = n21 AND n27; n29 = NOT n21 AND NOT n27; n30 = NOT n28 AND NOT n29; n31 = haemoglobin[0] AND haemoglobin[1]; n32 = NOT haemoglobin[0] AND NOT haemoglobin[1]; n33 = NOT n31 AND NOT n32; n34 = n30 AND n33; n35 = NOT n30 AND NOT n33; n36 = NOT n34 AND NOT n35; n37 = n24 AND n36; n38 = NOT n24 AND NOT n36; n39 = NOT n37 AND NOT n38; n40 = NOT systolic[0] AND systolic[1]; n41 = systolic[0] AND NOT systolic[1]; n42 = NOT n40 AND NOT n41; 33 n43 = systolic[2] AND n42; n44 = NOT systolic[2] AND NOT n42; n45 = NOT n43 AND NOT n44; n46 = n21 AND n45; n47 = NOT n21 AND NOT n45; n48 = NOT n46 AND NOT n47; n49 = NOT systolic[3] AND n48; n50 = NOT n25 AND NOT n28; n51 = systolic[3] AND NOT n48; n52 = NOT n49 AND NOT n51; n53 = NOT n50 AND n52; n54 = NOT n49 AND NOT n53; n55 = NOT n43 AND NOT n46; n56 = NOT systolic[1] AND systolic[2]; n57 = systolic[1] AND NOT systolic[2]; n58 = NOT n56 AND NOT n57; n59 = n40 AND n58; n60 = NOT n40 AND NOT n58; n61 = NOT n59 AND NOT n60; n62 = NOT systolic[3] AND n61; n63 = systolic[3] AND NOT n61; n64 = NOT n62 AND NOT n63; n65 = NOT n55 AND n64; n66 = n55 AND NOT n64; n67 = NOT n65 AND NOT n66; n68 = n54 AND NOT n67; n69 = NOT n54 AND n67; n70 = NOT n68 AND NOT n69; n71 = NOT haemoglobin[0] AND haemoglobin[1]; n72 = haemoglobin[0] AND NOT haemoglobin[1]; n73 = NOT n71 AND NOT n72; n74 = haemoglobin[2] AND n73; n75 = NOT haemoglobin[2] AND NOT n73; n76 = NOT n74 AND NOT n75; n77 = n31 AND n76; n78 = NOT n31 AND NOT n76; n79 = NOT n77 AND NOT n78; n80 = NOT n74 AND NOT n77; n81 = NOT haemoglobin[1] AND haemoglobin[2]; n82 = haemoglobin[1] AND NOT haemoglobin[2]; n83 = NOT n81 AND NOT n82; n84 = n71 AND n83; n85 = NOT n71 AND NOT n83; n86 = NOT n84 AND NOT n85; n87 = NOT haemoglobin[3] AND n86; n88 = haemoglobin[3] AND NOT n86; n89 = NOT n87 AND NOT n88; n90 = NOT n80 AND n89; n91 = n80 AND NOT n89; n92 = NOT n90 AND NOT n91; n93 = NOT n79 AND NOT n92; n94 = n79 AND n92; n95 = NOT n93 AND NOT n94; n96 = NOT n70 AND NOT n95; n97 = n50 AND NOT n52; n98 = NOT n53 AND NOT n97; n99 = NOT n79 AND n98; 34 n100 = NOT n34 AND NOT n37; n101 = n79 AND NOT n98; n102 = NOT n99 AND NOT n101; n103 = NOT n100 AND n102; n104 = NOT n99 AND NOT n103; n105 = n70 AND n95; n106 = NOT n96 AND NOT n105; n107 = NOT n104 AND n106; n108 = NOT n96 AND NOT n107; n109 = NOT n62 AND NOT n65; n110 = NOT n56 AND NOT n59; n111 = NOT systolic[2] AND NOT systolic[3]; n112 = systolic[2] AND systolic[3]; n113 = NOT n111 AND NOT n112; n114 = NOT n110 AND n113; n115 = n110 AND NOT n113; n116 = NOT n114 AND NOT n115; n117 = NOT n109 AND n116; n118 = n109 AND NOT n116; n119 = NOT n117 AND NOT n118; n120 = NOT n68 AND n119; n121 = n68 AND NOT n119; n122 = NOT n120 AND NOT n121; n123 = NOT n87 AND NOT n90; n124 = NOT n81 AND NOT n84; n125 = NOT haemoglobin[2] AND NOT haemoglobin[3]; n126 = haemoglobin[2] AND haemoglobin[3]; n127 = NOT n125 AND NOT n126; n128 = NOT n124 AND n127; n129 = n124 AND NOT n127; n130 = NOT n128 AND NOT n129; n131 = NOT n123 AND n130; n132 = n123 AND NOT n130; n133 = NOT n131 AND NOT n132; n134 = NOT n93 AND n133; n135 = n93 AND NOT n133; n136 = NOT n134 AND NOT n135; n137 = n122 AND n136; n138 = NOT n122 AND NOT n136; n139 = NOT n137 AND NOT n138; n140 = NOT n108 AND n139; n141 = n108 AND NOT n139; n142 = NOT n140 AND NOT n141; n143 = n104 AND NOT n106; n144 = NOT n107 AND NOT n143; n145 = n100 AND NOT n102; n146 = NOT n103 AND NOT n145; n147 = NOT n39 AND NOT n146; n148 = NOT n144 AND n147; n149 = NOT n142 AND n148; n150 = NOT n142 AND NOT n149; l0n0_nn_out[0] = n39 AND n150; l0n0_nn_out[1] = n146 AND n150; l0n0_nn_out[2] = n144 AND n150; l0n0_nn_out[3] = n142 AND n150; 35 No Dependency On: Input 2: urea Input 3: creatinine Network structure visualized by ABCBenchmark "l0n0_nn". Time was Tue Feb 18 14:07:01 2020. The network contains 134 logic nodes and 0 latches.l0n0_nn_out[0]l0n0_nn_out[1]l0n0_nn_out[2]l0n0_nn_out[3]151152153154150 39146144142149 148140141108139147107 96143104106137138103 9910512213614570 95102 100120121686910111913413554 6798 7913393373853 499497 3411711813113236 2452 5092109 116123 130355165669091 628730 3348 systolicbloodpressure[3]5564808928294647 2543637778 748811411512812927 21456176 3186 haemoglobin[3]110 113124 12726445960758485 568123 haemoglobin[0]systolicbloodpressure[2]42584073 haemoglobin[2]8371 223241577282111112125126systolicbloodpressure[0]systolicbloodpressure[1] haemoglobin[1]urea[0]urea[1]urea[2]urea[3]creatinine[0]creatinine[1]creatinine[2]creatinine[3] Figure 11: Example of the AIG that is derived from a simple logic module. The visualization was exported after creating the AIG with ABC [14]. As a proof of concept, Table 23 provides the computing times for MiniSAT [ 15] running on AIGs of different sizes, while searching for satisfying assignments of the underlying logic function. The runtimes are in the magnitude of minutes to a few hours. Table 23: Results of the computing times for MiniSAT [ 15] to nd satisfying arguments for multiple settings of bloated and reduced logic - ordered by the number of AIG nodes. Logic Translation (mtotal bits, ifractional bits) Settings AIG Nodes AIG Levels MiniSAT time Arithmetic Circuit ( 32,16) - 2,516,251 1,113 18,813.05 s (313.55 min) Random Forest ( 8,6) Estimators: 4; Max. Depth: 10 912,589 275 22,310.16 s (371.84 min)


LITERATURE REVIEW SUMMARY:

==========

The paper discusses how running SAT-solvers on logic functions can help in system verification. The example used shows that missing dependencies on features can be found which can help in curating data sets. The computing times for MiniSAT to find satisfying arguments for multiple settings of bloated and reduced logic are provided.