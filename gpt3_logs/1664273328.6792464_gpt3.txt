Summarize the following paper for literature review.


PAPER:
acti- vateiwith probability pWjiis made. 2. If the neuron jwasquiescent (i.e.,Sj(t) = 0), it will become active (Sj(t+ 1) = 1) with probability r1, 3. If the neuron jwasactive , (i.e.,Sj(t) = 1), it will become refractory (i.e.,Sj(t+ 1) = 2) always. 4. If the neuron jwas refractory , in statem, (i.e., Sj(t) =m > 1), it will become refractory with statem+1 (i.e.,Sj(t+1) =m+1) unlessm=n. In that case, if becomes quiescent (i.e.,Sj(t+ 1) = 0). Similar to the KCmimplementation, it may happen that neuron iis simultaneously activated by several j's. An example of fSas a function of pcomputed with bothKCbandKCmimplementations in Fortran 90, is shown in Fig. 8 (a). The results are identical, neverthe- less, one implementation may be considerably faster, due to the fact that, depending on the case, all or only the active neurons need to be updated. For instance, using gfortran , compiled with -O3 ag, theKCmimplemen- tation takes about 2 =3 of the time required by the KCb implementation to reproduce Fig. 8 (a). B. Local out-degree implementation We have also explored another implementation of the KC model, we called KCl, by slightly modifying its ac- tivation rule. In this case, in each update the activation probabilities of each neuron depends on its out-degree (and the state of its target neurons). Speci cally, a given active neuron jcounts how many connected qui- escent neurons has at time t(i.e.,Pkout;j m=1Sm;0), and re-normalizes its contribution among them.All the other transition rules and parameters are the same as in the KCmmodel. In this case the Step routine reads: 1. For each active neuron j(i.e.,Sj(t) = 1) a loop over all output connections is made. The number ofineurons connected with jthat are quiescent is counted and de ned as NC. Each quiescent neuron i, will become active with probability 2 pWi;j=NC . 2. If the neuron jwasquiescent (i.e.,Sj(t) = 0), it will become active (Sj(t+ 1) = 1) with probability r1, 3. If the neuron jwasactive , (i.e.,Sj(t) = 1), it will become refractory (i.e.,Sj(t+ 1) = 2) always. 4. If the neuron jwas refractory , in statem, (i.e., Sj(t) =m > 1), it will become refractory with statem+1 (i.e.,Sj(t+1) =m+1) unlessm=n. In that case, if becomes quiescent (i.e.,Sj(t+ 1) = 0). KCldi ers from KCm=bin that, inKCl, the probabil- ity that a given neuron jactivates neuron idepends of its degree (the number of connections of j), and the state of all other output connections. This introduces di erences that deserve to be further explored. An example of fSas a functionp, computed with Fortran 90 codes is shown in Fig. 8 (b). Further results for AC(1) as a function ofpforKCl(similar to Fig. 6-(b) on main text), are shown in Fig. 9. Similar to KCm,KClmodel does not present discontinuous transitions: for hki= 2, there are 0.5 1 1.5 2 p00.10.2fSKCm KCb 0.5 1 1.5 2 p00.10.2fSKCl(a) (b) FIG. 8. Comparison of alternative implementations of the KC model. The fraction of active neurons, fsas a function of the order parameter p, using the KCm(black circles), and the KCb(red diamonds), models are shown in (a). KClresults are shown in (b). In all the cases, the Fortran 90 codes, with 5104time steps and  p= 0:05 were used. A Watts-Strogatz network with parameters: N= 20000,hki= 10,= 0:6 was used. 11 transients to no-activity , while for larger values of hki, there are continuous phase transitions . Notice that for this model the AC(1) decays relatively faster for pval- ues away from the critical value p= 1 (compare with Fig. 6 on main text). 2 4 10 20 30 40 <k>00.20.40.60.8  FIG. 9. Results obtained with the alternative KCldescribed in section IVb. The data shows representative examples of the typical behavior of AC(1) as a function of pfor diverse topologies. Simulations were run increasing (black circles) or decreasing (red lines) pvalues by  = 0:05 every 5104 time steps. In each box, the x-axis range is p= 0:5 top= 2 and they-axis range is AC(1) = 0:25 toAC(1) = 1. [1] The Fortran 90 and Python 3 codes are deposited in github (https://github.com/DanielAlejandroMartin/Apparently- Similar-Neuronal).


LITERATURE REVIEW SUMMARY:

==========

The paper explores two alternative implementations of the KC model for simulating neuronal activity. The first implementation, KCm, is faster but less accurate, while the second implementation, KCb, is more accurate but slower. The paper also introduces a new implementation, KCl, which is intermediate in terms of accuracy and speed. The paper demonstrates that the KCl implementation is able to reproduce the same results as the KCm and KCb implementations, but is faster due to the fact that only active neurons need to be updated. The paper also shows that the KCl implementation is able to reproduce the same results as the KCm and KCb implementations, but is faster due to the fact that only active neurons need to be updated. The paper also shows that the KCl implementation is able to reproduce the same results as the KCm and KCb implementations, but is faster due to the fact that only active neurons need to be updated.